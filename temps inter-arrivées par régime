"""
A5_interarrivals_regimes.py
Validation des temps inter-arrivées par régime (Chapitre 3 : COVID-19)

Auteur : Kouassi Innocent N'GORAN
Date   : Octobre 2025
"""

import numpy as np
import matplotlib.pyplot as plt

def main():
    # ==============================
    # PARAMÈTRES DU MODÈLE MMPP (3 régimes)
    # ==============================
    lambda_v = np.array([215.3, 792.6, 2418.7])  # taux par jour
    pi = np.array([0.263, 0.421, 0.316])         # probas stationnaires

    # ==============================
    # SIMULATION DES TEMPS INTER-ARRIVÉES
    # ==============================
    np.random.seed(42)
    n_samples = 5000

    # Attribution des régimes selon pi
    states = np.random.choice([0, 1, 2], size=n_samples, p=pi)

    # Simulation des temps inter-arrivées ~ Exp(lambda_i)
    inter_arrivals = np.array([np.random.exponential(1/lambda_v[s]) for s in states])

    # ==============================
    # GRAPHIQUE : EMPIRIQUE VS THÉORIQUE
    # ==============================
    fig, axes = plt.subplots(1, 3, figsize=(15, 4))
    plt.subplots_adjust(wspace=0.3)

    colors = ['#1f77b4', '#ff7f0e', '#d62728']
    for i in range(3):
        ax = axes[i]
        data_i = inter_arrivals[states == i]

        # Histogramme empirique
        ax.hist(data_i, bins=40, density=True, alpha=0.6, color=colors[i], edgecolor='k', label='Empirique')

        # Densité exponentielle théorique
        x = np.linspace(0, np.percentile(data_i, 99), 300)
        y = lambda_v[i] * np.exp(-lambda_v[i] * x)
        ax.plot(x, y, 'r-', lw=2, label=f'Théorique (λ={lambda_v[i]:.1f})')

        # Esthétique
        ax.set_title(f"Régime {i+1}", fontsize=12, fontweight='bold')
        ax.set_xlabel("Temps inter-arrivée (jours)")
        if i == 0:
            ax.set_ylabel("Densité")
        ax.legend()
        ax.grid(alpha=0.3)

    fig.suptitle("Superposition Empirique vs Théorique des Temps Inter-Arrivées par Régime",
                 fontsize=14, fontweight='bold')
    plt.tight_layout()
    plt.savefig("A5_interarrivals_regimes.pdf", dpi=300, bbox_inches='tight')
    plt.show()

if __name__ == "__main__":
    main()
